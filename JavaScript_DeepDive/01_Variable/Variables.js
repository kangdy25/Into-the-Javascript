// ######################################## 1 - 1 ######################################## 

// 변수는 하나의 값을 저장하기 위한 수단이다.
var userID = 1;
var userName = 'Lee';

// ######################################## 1 - 2 ######################################## 

// 객체나 배열 같은 자료구조를 사용하면 여러 개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다.
var user = { id: 1, name: 'Lee'};

var user = [
    { id: 1, name: 'Lee' },
    { id: 2, name: 'Kim' }
]

var result = 10 + 20;
// var 키워드는 여러 단점이 있다. 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다는 것이다.

// ######################################## 1 - 3 ######################################## 

console.log(score); // undefined
var score; // 변수 선언
// 위의 두 문장을 통해 알 수 있듯, 
// 자바스크립트에서는 "변수 선언이 소스코드가 순차적으로 실행되는 런타임 이전 단계에서 먼저 실행된다."
// 이를 "변수 호이스팅 (Variable Hoisting)"이라고 한다. (var, let, const, function, fuction*, class)


// ######################################## 1 - 4 ######################################## 

var gimotti; // 변수 선언;
gimotti = '기모치!!'; // 값의 할당
// var gimotti = '기모치!!'; 와 같다.

// 이때 주의할 것은 "변수 선언은 런타임 이전에 먼저 실행된다."
// 그러나, "값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다."

// ######################################## 1 - 5 ######################################## 

var height = 169; // 변수 선언과 값의 할당
height = 171;     // 값의 재할당

// 값의 재할당은 현재 변수에 저장된 값을 버리고 새로운 값을 저장하는 것이다. 
// 즉, 변수에 저장된 값을 다른 값으로 변경하기에 "변수"이다.
// 값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수(const)이다.

// ######################################## 1 - 6 ######################################## 

// 연매니지드 언어
// C언어 같은 언매니지드 언어는 개발자가 명시적으로 메모리를 할당하고 해제하기 위해 
// malloc()과 free() 같은 메모리 제어 기능을 제공한다.
// 언매니지드 언어는 메모리 제어를 개발자가 직접 하기에 메모리 누수를 막고 최적의 성능을 확보 가능하지만 오류 생산의 가능성이 크다.

// 매니지드 언어
// 자바스크립트 같은 매니지드 언어는 메모리 할당 및 해제를 프로그래밍 언어가 지원하고 개발자의 메모리 제어를 허용하지 않는다.
// 즉, 개발자가 메모리 할당과 해제를 직접할 수 없고, 사용하지 않는 메모리의 해제는 "가비지 컬렉터"가 수행한다.
// 매니지드 언어는 반대로 개발자의 수고가 덜하지만, 성능 면에서의 손실을 감수해야 한다.

// ######################################## 1 - 7 ######################################## 

// 식별자 네이밍 규칙
// 식별자: 어떤 값을 구별해서 식별할 수 있는 고유한 이름

// 1. 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.
// 2. 단, 식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호($)로 시작해야 한다. 숫자로 시작하는 것은 허용하지 않는다.
// 3. 예약어는 식별자로 사용할 수 없다. (예약어: 프로그래밍 언어에서 사용되거나 사용될 예정인 단어)

var person, $elem, _name, first_name, val1; // 가능
var きもち; // 식별자를 만들 때 유니코드 문자를 허용하기에 영어 외의 한글, 일본어 식별자도 가능하다.
// 자바스크립트는 대소문자 구분을 하기에 아래 세 개의 변수는 모두 별개이다.
var firstname;
var firstName;
var FIRSTNAME;

// var first-name; // SyntaxError
// var 1st; // SyntaxError
// var this; // SyntaxError

var x = 3; // 변수가 의미하는 바를 알기 어려움
var weight = 68; // weight, 몸무게를 의미하는 변수임을 짐작할 수 있습니다.

var d; // NG
var ElapsedTimeInDay // OK

// ######################################## 1 - 8 ######################################## 

// 네이밍 컨벤션: 하나 이상의 영어 단어로 구성된 식별자를 만들 때 가독성 좋게 단어를 구분하기 휘해 정한 규칙
// 일관성을 유지하면서 네이밍 컨벤션을 사용하자
// 자바스크립트에서는 일반적으로 변수나 함수에 "카멜 케이스"를 사용하고, 생성자 함수, 클래스 이름에는 파스칼 케이스를 사용한다.
// 코드의 가독성을 높이려면 카멜 케이스와 파스칼 케이스를 따르는 것이 유용하다.

// 카멜 케이스 (camelCase)
var firstName;

// 스네이크 케이스 (snake_case)
var first_name;

// 파스칼 케이스 (PascalCase)
var FirstName;

// 헝가리안 케이스 (typeHungarianCase)
var strFirstName; // type + identifier
var $elem = document.getElementById('myId'); // DOM 노드
var observable$ = fromEvent(document, 'click'); // RxJS 옵저버블
