// ######################################## 1 - 1 ######################################## 

// "문(Statement)"은 프로그램을 구성하는 기본 단위이자 최소 실행단위이다. 명령문이라고도 부른다.
// 문은 토큰으로 구성되며, 토큰(Token)은 문법적인 의미를 가지며 문법적으로 나눌 수 없는 코드의 기본 요소를 의미한다.

// 토큰의 종류: 키워드, 식별자, 연산자, 리터럴, 세미콜론, 특수기호 ...
// 문의 종류: 선언문, 할당문, 조건문, 반복문

// 변수 선언문
var x;

// 할당문
x = 5;

// 함수 선언문
function foo() {}

// 조건문
if (x > 1) { console.log(x); }

// 반복문
for (var i = 0; i < 2; i++) { console.log(i); }

// ######################################## 1 - 2 ######################################## 

// 세미콜론(;)은 문의 종료를 나타낸다. 그렇기에 문을 끝낼 때는 세미콜론을 붙여야 한다
// 다만, 0갸 이상의 문을 괄호로 묶은 코드 블록({...}) 뒤에는 세미콜론을 붙이지 않는다.
// ASI : 세미콜론 자동 삽입 기능으로 인해 세미콜론은 옵션이다.

function foo () {
    return {}
    // ASI의 동작 결과 => return; {};
    // 개발자의 예측 => return {};
}

console.log(foo()); // undefined

var bar = function () {}
(function() {})();
// ASI의 동작 결과 => var bar = function () {}(function() {})();
// 개발자의 예측 => var bar = function () {}; (function() {})();
// TypeError: (intermediate value)(...) is not a function

// ######################################## 1 - 3 ######################################## 

// 표현식: 값으로 평가될 수 있는 문이다.
// 문에는 표현식인 문과 표현식이 아닌 문으로 구분되는데, 이를 구분하는 가장 간단한 방법은 "변수를 할당해보는 것"이다.

// 변수 선언문은 표현식이 아닌 문이다.
var x;

// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.
x = 100;

// 표현식인 문은 값처럼 사용할 수 있다 
var foo = x = 100;
console.log(foo); // 100 

// 반대로 표현식이 아닌 문은 값처럼 사용할 수 없다.
// var foo = var x; // SyntaxError: Unexpected token var