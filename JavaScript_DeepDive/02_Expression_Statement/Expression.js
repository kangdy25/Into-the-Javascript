// ######################################## 1 - 1 ######################################## 

// 값: 식(Expression)이 평가(Evaluate)되어 생성된 결과
var sum = 10  + 20;

// 리터럴(Literal): 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
// 즉, 리터럴은 변하지 않는 데이터 그 자체를 의미한다. (상수와는 다른 개념)
// 리터럴을 사용하여 다양한 종류의 "값"을 생성할 수 있다.
// 리터럴의 종류로는 정수 리터럴, 부동소수점 리터럴, 문자열 리터럴, 불리언 리터럴, 객체 리터럴, 배열 리터럴, 함수 리터럴 등이 있다.

// ######################################## 1 - 2 ######################################## 

// 표현식: 값으로 평가될 수 있는 문이다.
// 표현식과 표현식이 평가된 값은 동치이며, 값이 위치할 곳에 표현식이 위치할 수도 있다.
var score = 50 + 50;

// 리터럴 표현식
10
'hello'

// 식별자 표현식 (선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

// 연산자 표현식
10 + 20
sum = 10
sum !== 10

// 함수/매서드 호출 표현식 (선언이 이미 존재한다고 가정)
square()
person.getName()

